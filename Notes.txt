I.
System kontroli wersji - system zapisujący historię zmian w kodzie np. git z którego korzysta github. Umożliwia w razie potrzeby przywrócenie odpowiednich wersji. Można dzięki niemu przeglądać historie zmian, kto je wprowadził, przywracać stare wersje i dodatkowo ułątwia prace w grupie.

branching - tworzenie niezależnych od siebie kopii kodu na których można pracować niezależnie od głównego repozytorium i w razie potrzeby złączyć je (głowne repo) z gałęzią w jedną całość.

git jest rozproszonym kontrolem wersji gdyż główne repozytorium jest jedynie kwestią umowną i programiści pracują raczej na własnych kopiach.

w repozytorium można wydzielić
working directory ()
- przechowuje pliki naszego projektu



stage area ( dodanie za pomocą komendy add. plików zmodyfikowanych)
- tymczasowe przechowuje pliki które mają trafić do głównego repozytorium

.git area ((dodanie za pomocą komendy commit plików sledzonych)
-główna przechowalnia (foldet .git)

plik .gitignore zachowuje nazwy plików które muszą być ignorowane

git commit without -m flag will open editor for adding message

git clean deletes all files which aren't tracked
-n gives list of files that would be deleted
-nd gives list of files/folders that would be deleted
-i opens interactive way (add df for folder deletion)

git restore --staged <file> to revert specific file from stagin area
git restore - <file> to revert changes made to a file
git rm <fil> removes from repository
git reset clears staging area (reverse of git add)
git chechkout <file> can be used to restore a file that was earlier in git (moves head pointer to specified) 

git chechkout <hash> it enables us to work in detached file state at specific place at history and create a new branch with changes we have created

git revert <hash> reverses changes made from specific commit and writes them as new comit
git reset <hash> resets git repo to specific place in history, should be used directly in public repository 
--mixed (every newer commit will be deleted and those changed will added as untracked)
--soft (every newer commit will be deleted and those changed will added as staged)
--hard (every newer commit will be deleted and those changed lost )

git log shows history of commits made
--oneline (easy to read version)
-- author ="AuthorName" (show commit of specific author)
--grep ="Phrase" (search by specific phrase made in commit comment)
--oneline --number (specifiy how many commit yuou wanna see )
-- <file> see commits which made change to specific file
--oneline --patch --<file> show changes made to file
-- stat show stats of changing of specific file
-- format="formattingWay" let us specifiy how we want to see the history of github, to see specific way go for github documentation 
we can read hashed from it and move to them with checkout

Czym jest branching,system kontroli wersji. Co to znaczy, że git jest rozproszonym system kontroli wersji

wyjasnij flow dodawania nowych plików do git i nazwij poszczególne obszary przechowywania plików.

Podaj komendem która jest odwrotnością git add.
Jakiej komendy by przejsc w stan detached head konkretnego hasha.
W jaki sposób można zresetować git do konkretnego commita i jakich flag ta komenda używać
Jak usunąc plik z repozytorium
wyjasnij co robi git clean i podaj flagi z jakich korzysta
Plik zostaje usunięty z working directory po czym informacja o tym zostaje dodana do stagin area, okresl jak można powrócić do stanu repozytorium przed usunięciem pliku.

Podaj jak dostać logi które:
-są napisane w wersji skroconej, zawierają konkretnego atura, tekst komentarzu, jest ich określona ilość

Jak cofnąć zmiany z konkretnego commita i zapisać je jako nowy commit.

II.
Dobra praktyka pisania komentarzy,
Zaczynać z dużej litery
Maks 72 znaków na wiersz (git sam z siebie nie łamie wierszy)
Komentarz jak i tytuł zawierają informacje o tym co zrobione zostało w commita
Nie dodawć kropki na koncu
Tytuł maks 50 znaków

git branch - show branch we are currently on and other branches that exist 
git stash (-m "comment text")  - suppose we've made some changes in a wrong branch in order to bring them to the correct one we can use
git stash list //holds information about stash changes
git stash push -u (allows to add changes which aren't yet tracked by git)
git stash which will store the information about changes we've made and then when switching to the correct branch we 
git stash branch [branchName] creates a new branch with latest stash entry
can use git stasth pop (optional:stash[index] to specifiy what from stash we want to pop) to bring those changes to the correct branch.

Head specifies the current branch at which we are currently working on.

suppose you are on branch master in order to merge it with some other branch use
git branch merge [branchName]

watch from 7:00 
#git Zdalne repozytorium i fork - Kurs git po polsku #9/12

